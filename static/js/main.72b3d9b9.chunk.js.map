{"version":3,"sources":["Images/backround.jpg","Images/slide2.png","Images/slide3.jpg","component/Component.js","store/action/action.js","store/action/actionTypes.js","App.js","serviceWorker.js","store/utility.js","store/reducers/reducer.js","index.js"],"names":["module","exports","coin","coinNumber","coinValue","StyledButton","styled","Button","StyledListGroup","ListGroup","StyledCarousel","Carousel","Label","label","Prv","Container","Navbar","bg","variant","Brand","class","type","Item","className","align","src","require","Caption","Form","id","placeholder","min","step","onChange","e","preventDefault","target","value","onClick","props","Inputcoin","horizontal","Object","values","this","denomination","map","key","coinsInSystem","max","Input","ButtonGroup","Calculate","Random","Reset","coinsForPrinting","Swal","fire","UpdateSystem","React","Component","connect","state","reducer","dispatch","calculate","random","reset","input","inputcoin","updateSystem","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","counter","initialState","allArrays","action","reload","isExist","undefined","alert","keys","forEach","parseFloat","console","log","coinCounter","randomValue","Math","toFixed","parseInt","optAr","sum","i","length","numbersOfCoin","j","push","allPossibleCases","words","split","aSystem","res","arr","coinsFromSystem","allCoinsCombination","numbersCoins","temp","letLen","pow","element","substring","Set","icon","title","text","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b3d9b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backround.8223cc58.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide2.3f7e48bc.png\";","module.exports = __webpack_public_path__ + \"static/media/slide3.9de9abe7.jpg\";","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {random,calculate,reset,input,inputcoin, updateSystem} from '../store/action/index'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button,Image, Container,ButtonGroup,ListGroup,ListGroupItem,Images,Form,Row,Col,Carousel, Navbar} from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport Swal from 'sweetalert2'\r\n\r\nlet coin,coinNumber,coinValue\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 5px;\r\n    color :#ca9d16\r\n`\r\nconst StyledListGroup = styled(ListGroup)`\r\n    width: 100%;\r\n`\r\n\r\n\r\nconst StyledCarousel = styled(Carousel)`\r\npadding: 10px;\r\n\r\n`\r\nconst Label = styled.label`\r\ncolor : #ca9d16;\r\n\r\n`\r\nclass Prv extends React.Component{\r\n    \r\n     render(){\r\n            return <Container> \r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>Change Machine</Navbar.Brand>\r\n                <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"button\" \r\n                >Help</button>\r\n                </Navbar>\r\n                <StyledCarousel>\r\n                    <Carousel.Item>\r\n                        <img\r\n                        \r\n                        className=\"rounded\"\r\n                        align =\"center\"\r\n                        src={require(\"../Images/backround.jpg\")}\r\n                        />\r\n                        <Carousel.Caption>\r\n                        <h3>Change Machine</h3>\r\n                        <p>Fast and easy exchange your money</p>\r\n                        </Carousel.Caption>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                        className=\"rounded\"\r\n                        src={require(\"../Images/slide2.png\")}\r\n                        class=\"center-block\"\r\n                        />\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                        className=\"rounded\"\r\n                        src={require(\"../Images/slide3.jpg\")}\r\n                        />\r\n                    </Carousel.Item>\r\n                </StyledCarousel>\r\n                <Form className=\"mt-5 mb-5\">\r\n                    <Label>Coin value:</Label>\r\n                    <input id=\"coin\" placeholder=\"Enter coin value\"  min=\"0.1\" type=\"number\" step=\".1\" \r\n                    onChange={e=>{e.preventDefault()\r\n                        coin=e.target.value\r\n                            }}>\r\n                    </input>\r\n                    <Label >Number of coin :</Label>\r\n                    \r\n                    <input id=\"numberCoin\" placeholder=\"Enter numbers of coins \"   type=\"number\" min=\"1\" step=\"1\" onChange={\r\n                        e=>{e.preventDefault()\r\n                        coinNumber=e.target.value\r\n                    }}></input><br/>\r\n                    \r\n                    <StyledButton  type=\"button\" onClick={()=>{this.props.Inputcoin(coin,coinNumber)}}>ADD COIN</StyledButton >\r\n                    <StyledListGroup horizontal>\r\n                        {Object.values(this.props.denomination).map(coin=>\r\n                            <ListGroup.Item key={coin} variant=\"dark\"> Number of coins {coin}: {this.props.coinsInSystem[coin]} </ListGroup.Item>)}\r\n               </StyledListGroup>\r\n                </Form>\r\n                <Form  >\r\n                    <input type=\"number\"  placeholder=\"Amount\" min=\"0\" max=\"50000\" step=\".1\" value={this.props.value} onChange={e=>\r\n                        {e.preventDefault()\r\n                        this.props.Input(e.target.value)}}></input><br/>           \r\n                    <ButtonGroup class=\"list-group list-group-flush\">  \r\n                        <StyledButton type =\"button\"  onClick={this.props.Calculate}>\r\n                        Calculate</StyledButton>\r\n                        <StyledButton type =\"button\" onClick={this.props.Random}>Random</StyledButton>\r\n                        <StyledButton type = \"button\" onClick={this.props.Reset}>Reset</StyledButton>\r\n                    </ButtonGroup>  \r\n                    <ListGroup>\r\n                        {Object.values(this.props.coinsForPrinting).map(coin =>\r\n                            <StyledButton type = \"button\"  class=\"btn btn-secondary btn-lg btn-block\" variant = \"dark\"  align=\"center\" onClick={\r\n                                ()=>{\r\n                                    Swal.fire(\r\n                                        'Good job!',\r\n                                        'You have selected a combination :'+ coin,\r\n                                        'success'\r\n                                      )\r\n                                    \r\n                                coinValue=coin\r\n                                this.props.UpdateSystem(coinValue) \r\n                                }}>{coin}</StyledButton>\r\n                            )}\r\n                    </ListGroup>  \r\n                    </Form>\r\n            </Container>\r\n    } \r\n}\r\n \r\nconst mapStateToProps = state =>{\r\n    return{\r\n        value:state.reducer.value,\r\n        coinsInSystem : state.reducer.coinsInSystem,\r\n        denomination:state.reducer.denomination,\r\n        coinsForPrinting:state.reducer.coinsForPrinting\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        Calculate:(value ) =>dispatch(calculate(value)),\r\n        Random: (value) => dispatch(random(value)),\r\n        Reset:(value) => dispatch(reset(value)),\r\n        Input:(value) => dispatch(input(value)),\r\n        Inputcoin:(coin,coinNumber) => dispatch(inputcoin(coin,coinNumber)),\r\n        UpdateSystem:(coinValue) => dispatch(updateSystem(coinValue))\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Prv)","import * as actionTypes from './actionTypes'\r\n\r\nexport const random = (value) =>({\r\n    type : actionTypes.RANDOM,\r\n    value\r\n})\r\n\r\nexport const calculate = (value) =>({\r\n    type : actionTypes.CALCULATE,\r\n    value\r\n})\r\n\r\nexport const reset = (value) =>({\r\n    type : actionTypes.RESET,\r\n    value\r\n})\r\n\r\nexport const input = (value) =>({\r\n    type : actionTypes.INPUT,\r\n    value\r\n})\r\nexport const inputcoin = (coin,coinNumber) =>({\r\n    type : actionTypes.INPUT_COIN,\r\n    coin:coin,\r\n    coinNumber:coinNumber\r\n    \r\n})\r\n\r\nexport const updateSystem = (coinValue) =>({\r\n    type : actionTypes.UPDATE_SYSTEM,\r\n    coinValue : coinValue\r\n})\r\n","export const RANDOM = 'RANDOM'\r\nexport const CALCULATE = 'CALCULATE'\r\nexport const RESET = 'RESET'\r\nexport const INPUT = 'INPUT'\r\nexport const INPUT_COIN ='INPUT_COIN'\r\nexport const UPDATE_SYSTEM='UPDATE_SYSTEM'\r\n","import React from 'react';\nimport Prv from './component/Component';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Prv/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actionTypes from '../action/actionTypes'\r\nimport { updateObject } from '../utility'\r\nimport Swal from 'sweetalert2'\r\nimport { object } from 'prop-types'\r\n\r\nlet counter = 0\r\nlet coinCounter=0\r\n\r\nconst initialState = {\r\n    value : \"\",\r\n    denomination : [],\r\n    coinsForPrinting : {},\r\n    allArrays : [],\r\n    coinsInSystem : {} \r\n}\r\n\r\nconst reset=(state,action)=>{\r\n\r\n    window.location.reload(false)\r\n}\r\n\r\nconst inputcoin=(state,action)=>{\r\n    let coinsInSystem={...state.coinsInSystem}\r\n    let coinsForPrinting={...state.coinsForPrinting}\r\n    let isExist=false\r\n    let denomination={...state.denomination}\r\n  \r\n    if(action.coin == undefined || action.coinNumber == undefined)\r\n    {\r\n        alert(\"ENTER VALUES\")\r\n    }\r\n    else{\r\n        Object.keys(coinsInSystem).forEach(coin=>{\r\n            if(coin===action.coin){\r\n                \r\n                coinsInSystem[coin]=parseFloat(coinsInSystem[coin])+parseFloat(action.coinNumber)\r\n                return isExist=true  \r\n            }\r\n            })\r\n        if(isExist===false)\r\n        { \r\n            denomination[counter]=action.coin\r\n            coinsInSystem[denomination[counter]]=action.coinNumber\r\n            counter ++\r\n        console.log(denomination)\r\n        console.log(\"coins\",coinsInSystem)\r\n    }}\r\n    return(updateObject(state,{coinsInSystem: coinsInSystem,coinsForPrinting : coinsForPrinting ,denomination:denomination,coinCounter : coinCounter}))\r\n}\r\n\r\nconst input=( state,action)=>{\r\n    return(updateObject(state,{value : action.value}))\r\n}\r\n\r\nconst random=(state, action,value)=>{   \r\n    const randomValue=(Math.random()*1000).toFixed(1)\r\n    console.log(parseInt(value))\r\n    return(updateObject(state, {value:randomValue}))  \r\n}\r\n\r\nconst calculate=(state, action)=>{\r\n\r\n    let coinsInSystem={...state.coinsInSystem}\r\n    let value = state.value\r\n    let denomination = state.denomination\r\n    let optAr = []\r\n    let sum = 0\r\n    let coinsForPrinting = {}\r\n    Object.keys(coinsInSystem).forEach(value=>{\r\n        sum=sum+(coinsInSystem[value]*value)\r\n    })\r\n    if(sum<value)\r\n    {\r\n    \r\n        Swal.fire(\r\n            \r\n            'Machine do not have enough money!',\r\n            'Enter more money'\r\n          )\r\n    }\r\n    else{\r\n\r\n    for(let i = 0;i<Object.keys(denomination).length;i++){\r\n        let numbersOfCoin = (value/denomination[i])\r\n        for(let j=0;j<numbersOfCoin && j<Object.values(coinsInSystem)[i] && j>-1  ;j++ )\r\n        {\r\n            optAr.push(denomination[i])\r\n        }\r\n        \r\n    }\r\n    coinsForPrinting= allPossibleCases(optAr,value);\r\n    }\r\n   \r\n    return(updateObject(state,{coinsInSystem:coinsInSystem, coinsForPrinting:coinsForPrinting}))\r\n}\r\nconst updateSystem=(state,action)=>{\r\n   let a = action.coinValue\r\n   var words = a.split(\" \");\r\n   let coinsInSystem = {...state.coinsInSystem}\r\n   let aSystem = []\r\n   let denomination = {...state.denomination}\r\n   let coinsForPrinting = {...state.coinsForPrinting} \r\n   for(let i = 0;i < words.length;i++)\r\n   {\r\n        let res = parseFloat(words[i]);\r\n        aSystem.push(res)\r\n        coinsInSystem[res]-=1  \r\n   }\r\n\r\n   coinsForPrinting ={}\r\n    console.log(\"niz\",words)\r\n    console.log(\"staro stanje\",words.length)\r\n    return(updateObject(state,{coinsInSystem : coinsInSystem,denomination : denomination,coinsForPrinting : coinsForPrinting,value : 0}))\r\n}\r\n\r\n    const allPossibleCases=(arr,value) =>{\r\n        let coinsFromSystem = Object.values(arr)\r\n        let allCoinsCombination = [];\r\n        let numbersCoins = [];\r\n        let temp= \"\";\r\n        let sum = 0\r\n        let letLen = Math.pow(2, coinsFromSystem.length);\r\n\r\n        for (let i = 0; i < letLen ; i++){\r\n            temp= \"\";\r\n            sum = 0\r\n            for (let j=0;j<coinsFromSystem.length;j++) {\r\n                if ((i & Math.pow(2,j))){ \r\n                    temp += coinsFromSystem[j] + \" \"\r\n                    sum += parseFloat(coinsFromSystem[j])  \r\n                    if (sum == value) {\r\n                        let element =temp.substring(0,temp.length-1)\r\n                        allCoinsCombination.push(element);\r\n                        numbersCoins.push(sum);\r\n                        allCoinsCombination = [...new Set(allCoinsCombination)]\r\n                        if(allCoinsCombination.length==5)\r\n                        { \r\n                            console.log(\"all comb\",allCoinsCombination);\r\n                            return allCoinsCombination \r\n                        }\r\n                     }\r\n                }\r\n            }\r\n        }\r\n        if(allCoinsCombination.length==0)\r\n        {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Your request can not be executed',\r\n              })\r\n        }\r\n        \r\n        console.log(\"all comb\",allCoinsCombination);\r\n        return allCoinsCombination  \r\n  }\r\n\r\n  const printingCoins=(coinsForPrinting) =>{\r\n        for(let i=0;i<Object.keys(coinsForPrinting).length;i++)\r\n        {\r\n            for(let j=0;j<Object.values(coinsForPrinting)[i].length;j++)\r\n            {\r\n                \r\n            }\r\n            \r\n        }\r\n      \r\n        return coinsForPrinting\r\n  }\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.RANDOM : return random(state,action)\r\n        case actionTypes.RESET : return reset(state,action)\r\n        case actionTypes.INPUT : return input(state,action)\r\n        case actionTypes.CALCULATE : return calculate(state,action)\r\n        case actionTypes.INPUT_COIN : return inputcoin(state,action)\r\n        case actionTypes.UPDATE_SYSTEM :return updateSystem(state,action)\r\n        default: return state\r\n    }\r\n}\r\nexport default reducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {createStore, combineReducers} from 'redux'\nimport reducer from './store/reducers/reducer'\n\nconst rootReducer = combineReducers({\n    reducer\n  });\n\nconst store = createStore(rootReducer)\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}